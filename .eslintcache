[{"C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\index.js":"1","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\reportWebVitals.js":"2","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\App.js":"3","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\Home.js":"4","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\firebase.js":"5","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\userprofile\\Profile.js":"6","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\PostInfo_Comment\\Comment.js":"7","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\nav\\Nav.js":"8","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\AddPost\\AddPostIcon.js":"9","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\feed\\Feed.js":"10","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\AddPost\\Modal\\AddPostModal.js":"11","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\sidebar\\Sidebar.js":"12","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\login\\Login.js":"13","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\feed\\post\\Post.js":"14","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\sidebar\\Overlay.js":"15","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\userprofile\\YourPosts\\YourPost.js":"16"},{"size":517,"mtime":1612305552290,"results":"17","hashOfConfig":"18"},{"size":375,"mtime":1612305552358,"results":"19","hashOfConfig":"18"},{"size":986,"mtime":1612477113215,"results":"20","hashOfConfig":"18"},{"size":663,"mtime":1612477113219,"results":"21","hashOfConfig":"18"},{"size":624,"mtime":1612305552279,"results":"22","hashOfConfig":"18"},{"size":1865,"mtime":1612478407284,"results":"23","hashOfConfig":"18"},{"size":4676,"mtime":1612477113222,"results":"24","hashOfConfig":"18"},{"size":2819,"mtime":1612477113231,"results":"25","hashOfConfig":"18"},{"size":703,"mtime":1612305552324,"results":"26","hashOfConfig":"18"},{"size":808,"mtime":1612477113226,"results":"27","hashOfConfig":"18"},{"size":4561,"mtime":1612482391139,"results":"28","hashOfConfig":"18"},{"size":832,"mtime":1612477113234,"results":"29","hashOfConfig":"18"},{"size":2719,"mtime":1612370453016,"results":"30","hashOfConfig":"18"},{"size":5158,"mtime":1612482672952,"results":"31","hashOfConfig":"18"},{"size":173,"mtime":1612305552349,"results":"32","hashOfConfig":"18"},{"size":690,"mtime":1612479546265,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1j7jhag",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},"C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\index.js",[],["71","72"],"C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\reportWebVitals.js",[],"C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\App.js",["73"],"import React, { useState } from \"react\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport Home from \"./pages/Home.js\";\r\nimport \"./App.css\";\r\nimport Profile from \"./pages/userprofile/Profile\";\r\nimport Nav from \"./pages/nav/Nav\";\r\nimport Comments from \"./pages/PostInfo_Comment/Comment\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport { auth } from \"./firebase\";\r\nfunction App() {\r\n  const [isLogged] = useAuthState(auth);\r\n  \r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <Nav isLogged={isLogged} />\r\n        <Route exact path=\"/\" component={() => <Home isLogged={isLogged} />} />\r\n        <Route\r\n          path=\"/Comment/:id\"\r\n          render={(matchProps) => <Comments {...matchProps} isLogged={isLogged} />}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/profile\"\r\n          component={() => <Profile isLogged={isLogged} />}\r\n        />\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\Home.js",[],"C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\firebase.js",[],"C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\userprofile\\Profile.js",[],"C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\PostInfo_Comment\\Comment.js",["74","75","76"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./Comment.css\";\r\nimport {\r\n  Grid,\r\n  Avatar,\r\n  Typography,\r\n  Box,\r\n  CardActionArea,\r\n  Divider,\r\n  TextField,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport ModeCommentIcon from \"@material-ui/icons/ModeComment\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport db, { storage } from \"../../firebase\";\r\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\r\n\r\nfunction Comment(props) {\r\n  const [commentInput, setCommentInput] = useState(\"\");\r\n  const postRef = db.collection(\"posts\");\r\n  const commentsRef = db.collection(\"comments\");\r\n  const query = postRef.where(\"id\", \"==\", props.match.params.id);\r\n  const [post] = useCollectionData(query);\r\n  const commentQuery = commentsRef.where(\"postID\", \"==\", props.match.params.id);\r\n  const [comments] = useCollectionData(commentQuery);\r\n  const [image, setImage] = useState(\"\");\r\n  //submit comment\r\n  // console.log(props.isLogged)\r\n  // console.log(comments)\r\n\r\n  // useEffect (()=>{\r\n  //   commentsRef.where(\"postID\",\"==\",props.match.params.id).get().then(resp=>{\r\n  //     console.log(resp.data());\r\n  //   })},[]);\r\n\r\n  const submitHander = (e) => {\r\n    commentsRef\r\n      .add({\r\n        postID: props.match.params.id,\r\n        user: props.isLogged.displayName,\r\n        photoURL: props.isLogged.photoURL,\r\n        comment: commentInput,\r\n      })\r\n      .then((res) => {\r\n        setCommentInput(\"\");\r\n      });\r\n  };\r\n  const pressedEnter = (e) => {\r\n    if (e.keyCode === 13) {\r\n      submitHander();\r\n    }\r\n  };\r\n\r\n  if (post && comments) {\r\n    if (post[0].image) {\r\n      const gsRefrence = storage.refFromURL(post[0].image);\r\n      gsRefrence.getDownloadURL().then((img) => {\r\n        setImage(img);\r\n      });\r\n    }\r\n    return (\r\n      <div className=\"CCMContain\">\r\n        <div className=\"commentContainer\">\r\n          <Grid container alignItems=\"center\" spacing={2}>\r\n            <Grid item>\r\n              <Avatar src={post[0].userPhoto} />\r\n            </Grid>\r\n            <Grid item>{post[0].user}</Grid>\r\n          </Grid>\r\n          <br />\r\n          <Typography paragraph>{post[0].post}</Typography>\r\n          <Box component=\"span\" m={1}>\r\n            {image ? (\r\n              <>\r\n                <img src={image} style={{ height: \"40%\", width: \"50%\" }} />\r\n              </>\r\n            ) : null}\r\n          </Box>\r\n\r\n          <Grid container spacing={2}>\r\n            <CardActionArea style={{ width: \"fit-content\" }}>\r\n              <a href=\"#commentsA\" className=\"linkComment\">\r\n                <Box\r\n                  display=\"flex\"\r\n                  alignItems=\"center\"\r\n                  p={1}\r\n                  alignItems=\"center\"\r\n                >\r\n                  <ModeCommentIcon />\r\n                  &nbsp;&nbsp;Comments\r\n                </Box>\r\n              </a>\r\n            </CardActionArea>\r\n          </Grid>\r\n        </div>\r\n        <div className=\"commentContainer\">\r\n          {!props.isLogged ? (\r\n            <Grid container alignItems=\"center\" className=\"closedComment\">\r\n              <Grid items xs={10} spacing={2}>\r\n                Log in or sign up to leave a comment\r\n              </Grid>\r\n            </Grid>\r\n          ) : (\r\n            <div className=\"loggedComment\">\r\n              <TextField\r\n                className=\"commentInput\"\r\n                variant=\"outlined\"\r\n                placeholder=\"Add a comment\"\r\n                value={commentInput}\r\n                onKeyDown={pressedEnter}\r\n                onChange={(e) => setCommentInput(e.target.value)}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <IconButton onClick={submitHander}>\r\n                      <SendIcon color=\"primary\" />\r\n                    </IconButton>\r\n                  ),\r\n                }}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <br />\r\n          <Divider />\r\n          <br />\r\n          <div id=\"commentsA\">\r\n            {comments.map((comment, i) => (\r\n                <div className=\"commentDivider\" key={i}>\r\n                  <Grid container spacing={2} justify=\"flex-start\">\r\n                    <Grid item>\r\n                      <Avatar src={comment.photoURL}></Avatar>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <span className=\"commentUser\">{comment.user}</span>\r\n                      <p className=\"commentText\">{comment.comment}</p>\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <></>;\r\n  }\r\n}\r\n\r\nexport default Comment;\r\n","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\nav\\Nav.js",[],"C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\AddPost\\AddPostIcon.js",[],"C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\feed\\Feed.js",[],"C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\AddPost\\Modal\\AddPostModal.js",["77"],"import React, { useState } from \"react\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport \"./addpost.css\";\r\nimport db, { storage } from \"../../../firebase\";\r\nimport firebase from \"firebase\";\r\nimport { v4 } from \"uuid\";\r\nimport AddPhotoAlternateIcon from \"@material-ui/icons/AddPhotoAlternate\";\r\nimport { FlareSharp } from \"@material-ui/icons\";\r\n\r\nfunction AddPostModal(props) {\r\n  const [postInput, setPostInput] = useState({\r\n    title: \"\",\r\n    body: \"\",\r\n  });\r\n  const onChangeInput = (e) => {\r\n    const { name, value } = e.target;\r\n    setPostInput({ ...postInput, [name]: value });\r\n  };\r\n\r\n  let fileInput = React.createRef();\r\n  const [pictureUpload, setPictureUPload] = useState(false);\r\n  const submitPost = (e) => {\r\n    e.preventDefault();\r\n    const postref = db.collection(\"posts\");\r\n    const id = v4();\r\n    let location = \"pictures/\" + props.user.uid + \"/\" + v4();\r\n    let pictureRef = storage.ref(location);\r\n    pictureRef.put(fileInput.current.files[0]).then((res) => {\r\n      setPictureUPload(true);\r\n    });\r\n    if (pictureUpload){\r\n    postref\r\n      .add({\r\n        title: postInput[\"title\"],\r\n        post: postInput[\"body\"],\r\n        user: props.user.displayName,\r\n        userPhoto: props.user.photoURL,\r\n        date: firebase.firestore.FieldValue.serverTimestamp(),\r\n        id: id,\r\n        userId:props.user.uid,\r\n        image: \"gs://fhs-freddit.appspot.com/\" + location,\r\n      })\r\n      .then((resp) => {\r\n        setPostInput({\r\n          title: \"\",\r\n          body: \"\",\r\n        });\r\n        \r\n        props.close();\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Please try again\");\r\n      });\r\n    }else{postref\r\n      .add({\r\n        title: postInput[\"title\"],\r\n        post: postInput[\"body\"],\r\n        user: props.user.displayName,\r\n        userPhoto: props.user.photoURL,\r\n        date: firebase.firestore.FieldValue.serverTimestamp(),\r\n        id: id,\r\n        userId: props.user.uid,\r\n      })\r\n      .then((resp) => {\r\n        setPostInput({\r\n          title: \"\",\r\n          body: \"\",\r\n        });\r\n        \r\n        props.close();\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Please try again\");\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <Modal\r\n      className=\"modalContainer\"\r\n      open={props.openD}\r\n      onClose={props.close}\r\n      aria-labelledby=\"modal-title\"\r\n      aria-describedby=\"simple-modal-description\"\r\n      closeAfterTransition\r\n      BackdropComponent={Backdrop}\r\n      BackdropProps={{\r\n        timeout: 500,\r\n      }}\r\n    >\r\n      <Fade in={props.openD}>\r\n        <div className=\"modal\">\r\n          <h2 id=\"modal-title\">Something Modal</h2>\r\n          <form\r\n            autoComplete=\"off\"\r\n            className=\"addPostForm\"\r\n            onSubmit={submitPost}\r\n          >\r\n            <TextField\r\n              id=\"standard-multiline-flexible\"\r\n              label=\"Title\"\r\n              name=\"title\"\r\n              value={postInput.title}\r\n              onChange={onChangeInput}\r\n              multiline\r\n              rowsMax={1}\r\n              variant=\"filled\"\r\n            />\r\n            <TextField\r\n              id=\"filled-multiline-static\"\r\n              label=\"Send a post\"\r\n              name=\"body\"\r\n              value={postInput.body}\r\n              onChange={onChangeInput}\r\n              multiline\r\n              rows={8}\r\n              variant=\"filled\"\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              style={{width: '160px', backgroundColor: '#273046'}}\r\n              component=\"label\"\r\n              startIcon={<AddPhotoAlternateIcon />}\r\n            >\r\n              Upload File\r\n              <input\r\n                ref={fileInput}\r\n                id=\"upload-photo\"\r\n                name=\"upload-photo\"\r\n                type=\"file\"\r\n                hidden\r\n              />\r\n            </Button>\r\n            {/* <label htmlFor=\"upload-photo\">\r\n              <Fab color=\"secondary\"  variant=\"extended\" component=\"span\">\r\n                <AddCircleRounded/>{\"  \"}\r\n                Upload Image\r\n              </Fab>\r\n            </label> */}\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </Fade>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default AddPostModal;\r\n","C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\sidebar\\Sidebar.js",[],"C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\login\\Login.js",[],"C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\feed\\post\\Post.js",[],"C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\sidebar\\Overlay.js",[],"C:\\Users\\yojan\\Documents\\dev\\freddit\\src\\pages\\userprofile\\YourPosts\\YourPost.js",["78"],"import { render } from '@testing-library/react';\r\nimport React from 'react';\r\nimport db from '../../../firebase';\r\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\r\nimport Post from '../../feed/post/Post';\r\n\r\nexport default function YourPost(props){\r\n   const postRef = db.collection('posts')\r\n   const query = postRef.where(\"userId\",\"==\", props.user.uid) \r\n   const [posts] = useCollectionData(query); \r\n   console.log(posts);\r\n    if(posts){\r\n        return(<>\r\n            {posts.reverse().map((post, i)=>(<>\r\n                <Post post={post} key={i} isLogged={props.user}/>\r\n            </>))}\r\n        </>)\r\n    }\r\n    return (<>Your posts are displayed here!!</>)\r\n}",{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":1,"column":17,"nodeType":"85","messageId":"86","endLine":1,"endColumn":25},{"ruleId":"83","severity":1,"message":"87","line":1,"column":17,"nodeType":"85","messageId":"86","endLine":1,"endColumn":26},{"ruleId":"88","severity":1,"message":"89","line":75,"column":17,"nodeType":"90","endLine":75,"endColumn":76},{"ruleId":"91","severity":1,"message":"92","line":87,"column":19,"nodeType":"93","endLine":87,"endColumn":38},{"ruleId":"83","severity":1,"message":"94","line":12,"column":10,"nodeType":"85","messageId":"86","endLine":12,"endColumn":20},{"ruleId":"83","severity":1,"message":"95","line":1,"column":10,"nodeType":"85","messageId":"86","endLine":1,"endColumn":16},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'FlareSharp' is defined but never used.","'render' is defined but never used.","no-global-assign","no-unsafe-negation"]